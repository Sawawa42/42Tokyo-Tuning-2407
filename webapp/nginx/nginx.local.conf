# keepalive; スコア: 160
# keepalive + gzip; スコア: 611
# keepalive + gzip + キャッシュ; スコア: 490
# keepalive + gzip + キャッシュ + 大きいファイルアップロード; スコア: 0

http {
    # # 大きいファイルをアップロードする場合は、以下の設定を追加
    # client_body_buffer_size 128k;
    # client_max_body_size 10m;
    # client_header_buffer_size 1k;
    # large_client_header_buffers 4 16k;
    # output_buffers 1 32k;
    # postpone_output 1460;

    # キャッシュの設定
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=cache:10m inactive=60m max_size=1g;
    proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404 1m;
    proxy_cache_valid any 1m;
    proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
    proxy_cache_bypass $http_x_cache_bypass;
    proxy_no_cache $http_x_cache_bypass;

    # keep 少し処理が進むようになった。-> runnningの処理が最後まで進むようになった
    # keepalive_timeout 20; #だと、runningの処理が途中で止まる
    keepalive_timeout 65;
    keepalive_requests 100;

    # gzip圧縮 あまり効果はないと思われるが、多少の転送量削減にはなるみたい
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;


    # 処理の流れを記録するログのフォーマットを設定
    log_format json escape=json '
    {
        "time": "$time_local",
        "host": "$remote_addr",
        "forwardedfor": "$http_x_forwarded_for",
        "req": "$request",
        "method": "$request_method",
        "uri": "$request_uri",
        "status": "$status",
        "size": "$body_bytes_sent",
        "referer": "$http_referer",
        "ua": "$http_user_agent",
        "reqtime": "$request_time",
        "runtime": "$upstream_http_x_runtime",
        "apptime": "$upstream_response_time",
        "cache": "$upstream_http_x_cache",
        "vhost": "$host"
    }';
    access_log /var/log/nginx/access.log json;
    
    # エラーログのフォーマットを設定
    error_log /var/log/nginx/error.log debug;

    upstream frontend {
        server frontend:13000;
    }

    upstream backend {
        server backend:18080;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Next.jsのホットリロード設定
        location /_next/webpack-hmr {
            proxy_pass http://frontend/_next/webpack-hmr;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
    
            # バッファサイズの設定
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

    }
}


# events {
#     worker_connections 1024;
# }
events {
    worker_connections 1024;  # 必要に応じて増加
    multi_accept on;
}
worker_processes auto;  # 自動的に利用可能なCPUコア数に設定


# http {
#     log_format json escape=json '
#     {
#         "time": "$time_local",
#         "host": "$remote_addr",
#         "forwardedfor": "$http_x_forwarded_for",
#         "req": "$request",
#         "method": "$request_method",
#         "uri": "$request_uri",
#         "status": "$status",
#         "size": "$body_bytes_sent",
#         "referer": "$http_referer",
#         "ua": "$http_user_agent",
#         "reqtime": "$request_time",
#         "runtime": "$upstream_http_x_runtime",
#         "apptime": "$upstream_response_time",
#         "cache": "$upstream_http_x_cache",
#         "vhost": "$host"
#     }';
#     access_log /var/log/nginx/access.log json;

#     upstream frontend {
#         server frontend:13000;
#     }

#     upstream backend {
#         server backend:18080;
#     }

#     server {
#         listen 80;

#         location / {
#             proxy_pass http://frontend;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }

#         # Next.jsのホットリロード設定
#         location /_next/webpack-hmr {
#             proxy_pass http://frontend/_next/webpack-hmr;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "upgrade";
#         }


#         location /api/ {
#             proxy_pass http://backend;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }
#     }
# }
